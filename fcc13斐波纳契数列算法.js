/**
 * Created by chinecc on 2017/2/28.
 */
/*
* 给一个正整数num，返回小于或等于num的斐波纳契奇数之和。
 斐波纳契数列中的前几个数字是 1、1、2、3、5 和 8，随后的每一个数字都是前两个数字之和。
 
 例如，sumFibs(4)应该返回 5，因为斐波纳契数列中所有小于4的奇数是 1、1、3。
 提示：此题不能用递归来实现斐波纳契数列。因为当num较大时，内存会溢出，推荐用数组来实现。
 参考文档：博客园，Issue
* */

function sumFibs(num) {
    //todo: 算法参考
    //返回的数列里面根据规则是包括奇数和偶数，题目是要求把数列中的所有奇数相加
    // 这里就要做两个步骤，先获取num的斐波纳契数列，然后把返回的数列里面的所有奇数相加获取结果。
    var a = 1,b = 1,sum = 2;
    if (num < 2){
        return 1;
    }else{
        // 取所有数列
        for (var i = 2; i < num -1; i++){ // 因为同时取a,b两个值进行循环，循环的次数应该小于 num -1 次
            b = a + b;  // 取随后的数字是前两个数字之和
            if (b % 2 !== 0 && b <= num) { sum += b;} //这里直接对值进行判断是否为 奇数且小于或等于num，然后求和
            a = b - a;  // 这里相当于是把 a 获取为上一层的b
        }
    }
    b = a + b; // 循环结束后的获取的是最后一个数列的值
    if (b %2 !== 0 && b <= num) sum += b; // 判断它是否符合 奇数且小于或等于num
    return sum;     
}

sumFibs(5);

// sumFibs(1);// 应该返回一个数字。
// sumFibs(1000);// 应该返回 1785。
// sumFibs(4000000);// 应该返回 4613732。
// sumFibs(4);// 应该返回 5。
// sumFibs(75024);// 应该返回 60696。
// sumFibs(75025);// 应该返回 135721。
